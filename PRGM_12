//PROGRAM 12
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 5
typedef struct employee
{
	int id;
	char name[15];
} EMP;
EMP emp[MAX];
int a[MAX];
int create(int num)
{
	int key;
	key = num % 100;
	return key;
}
int getemp(EMP emp[], int key)
{
	printf("\nEnter emp id: ");
	scanf("%d", &emp[key].id);
	printf("\nEnter emp name: ");
	scanf("%s",emp[key].name);
	return key;
}
void display()
{
	int i, ch;
	while(1)
	{
		printf("\n1.Display ALL\n2.Filtered Display");
		printf("\nEnter the choice: ");
		scanf("%d",&ch);
		printf("\nThe hash table is:\n");
		printf("\nHTKey\tEmpID\tEmpName");
		if(ch == 1) {
			for(i=0; i<MAX; i++) {
				printf("\n%d\t%d\t%s", i, emp[i].id, emp[i].name);
			}
		} else if (ch==2) {
			for(i=0; i<MAX; i++) {
				if(a[i] != -1) {
					printf("\n%d\t%d\t%s", i, emp[a[i]].id, emp[a[i]].name);
				}
			}
		} else {
			exit(0);
		}
	}
}
void linear_prob(int key, int num)
{
	int flag = 0;
	int i = key;
	if (a[key] == -1) {
		a[key] = getemp(emp, key);
	} else {
		printf("\nCollision Detected...!!!\n");
		do {
			i = (i + 1) % MAX; // Linear probing: Move to the next index
			if (a[i] == -1) {
				a[i] = key; // Store the key (index) in the array
				flag = 1;
				break;
			}
		} while (i != key); // Stop if we've checked all slots

		if (!flag) {
			printf("\nHash table is full\n");
			display();
		} else {
			printf("\nCollision avoided successfully using LINEAR PROBING\n");
		}
	}
}
int main()
{
	int num, key, i;
	int ans = 1;
	printf("\nCollision handling by linear probing: ");
	for (i=0; i < MAX; i++)
		a[i] = -1;
	do
	{
		printf("\nEnter the data: ");
		scanf("%d", &num);
		key=create(num);
		linear_prob(key,num);
		printf("\nDo you wish to continue? (1/0): ");
		scanf("%d",&ans);
	} while(ans);
	display();
	return 0; // Add return 0 to main()
}
